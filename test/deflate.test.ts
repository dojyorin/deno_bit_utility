import {assertEquals} from "../deps.test.ts";
import {deflateEncode, deflateDecode} from "../src/deflate.ts";

const sample = new Uint8Array([
    0x71, 0xD6, 0xFB, 0x3D, 0xF9, 0xD9, 0x41, 0x07,
    0x38, 0x4D, 0xC9, 0x72, 0xE4, 0xA5, 0x63, 0x37,
    0xD6, 0x8D, 0x12, 0x75, 0x08, 0x62, 0xA1, 0xB6,
    0xAC, 0x3B, 0xEC, 0x12, 0x5A, 0xBF, 0x4F, 0x3B
]);

const encodeResult = new Uint8Array([
    0x2A, 0xBC, 0xF6, 0xDB, 0xF6, 0xE7, 0x4D, 0x47,
    0x76, 0x0B, 0xDF, 0x93, 0x45, 0x4F, 0x96, 0x26,
    0x9B, 0x5F, 0xEB, 0x15, 0x2A, 0xE5, 0x48, 0x5A,
    0xB8, 0x6D, 0x8D, 0xF5, 0x1B, 0xA1, 0xA8, 0xFD,
    0xFE, 0xD6, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
    0x03, 0x00
]);

Deno.test({
    name: "Deflate: Encode.",
    async fn(){
        const result = await deflateEncode(sample);

        assertEquals(result, encodeResult);
    }
});

Deno.test({
    name: "Deflate: Decode.",
    async fn(){
        const result = await deflateDecode(encodeResult);

        assertEquals(result, sample);
    }
});